#!/bin/bash -l

# =============================================================================
#                                modkit_job.sh
# =============================================================================
# Description:
#   This script automates the processing of aligned BAM files using Modkit's
#   pileup functionality within the Supercomputing Center (SCC) environment.
#   It performs the following sequential operations:
#
#     1. **Argument Parsing and Validation:**
#        - Ensures that exactly 18 input arguments are provided.
#        - Assigns each argument to a descriptive variable for clarity.
#        - Validates the existence of the input BAM file.
#
#     2. **Output File Definitions:**
#        - Determines the paths for output BED files based on input parameters.
#
#     3. **Flag Construction for Modkit Pileup:**
#        - Constructs Modkit-specific flags based on the types of RNA modifications
#          being analyzed and their corresponding coverage and modification thresholds.
#
#     4. **Modkit Pileup Execution and Runtime Logging:**
#        - Executes Modkit's pileup function on the input BAM file.
#        - Logs the runtime of the pileup process for performance monitoring.
#
#     5. **Filtering the Output BED File:**
#        - Applies specified coverage and modification thresholds to filter the Modkit
#          output, retaining only high-confidence modifications.
#
#   **Job Dependencies:**
#     - **Merge Job Dependency:**
#       - This script (`modkit_job.sh`) should be executed **after** the Merge Job
#         (`merge_job.sh`) to ensure that the input BAM file (`${GROUP}_${SAMPLE}_primary.bam`)
#         is finalized and ready for modification extraction.
#       - Dependencies are managed externally by the main job submission script
#         (e.g., `alignment_modkit_job.sh`) using job scheduling parameters to enforce
#         correct sequencing.
#
#   **Input Path Format:**
#     - The input BAM file must adhere to the following directory structure:
#       ```
#       ${ROOT_DIR}/RNA/${GROUP}/${SAMPLE}/aligned_bam_${ALL_MODS}/${GROUP}_${SAMPLE}_primary.bam
#       ```
#       - `{ROOT_DIR}`: Root path of the project (e.g., `/restricted/projectnb/leshlab/net/tjamali/project`)
#       - `{GROUP}`: Experimental or biological group (e.g., `Control`, `AD`)
#       - `{SAMPLE}`: Specific sample identifier (e.g., `C0`, `A1`)
#       - `{ALL_MODS}`: Type of RNA modification(s) (e.g., `m5C`, `m6A_DRACH`, `inosine_m6A`, `pseU`)
#
#     - **Example Input Path:**
#       ```
#       ${ROOT_DIR}/RNA/Control/C0/aligned_bam_m6A_DRACH/C0_Control_primary.bam
#       ```
#
#   **Output:**
#     - **BED File (`${OUTPUT_BED}`):**
#       - Contains modification pileup data generated by Modkit.
#
#     - **Filtered BED File (`${FILTERED_BED}`):**
#       - Contains modification pileup data filtered based on specified coverage and modification thresholds.
#
#   **Error Handling:**
#     - Validates the number of input arguments; exits with usage instructions if incorrect.
#     - Checks for the existence of the input BAM file; exits with an error message if not found.
#     - Ensures that the filtered BED file is successfully created and is not empty; issues a warning if conditions are not met.
#
#   **Notes:**
#     - Ensure that the `modkit` command is accessible in the environment where the script is executed.
#     - The input BAM file must be properly indexed (`.bai` file present) to facilitate efficient processing.
#     - Adjust resource allocations (e.g., threads) as necessary based on computational requirements and available resources.
#
# =============================================================================

# ----------------------------- Configuration ----------------------------------

# Enable strict error handling to ensure the script exits on any error
set -euo pipefail

# ----------------------- Step 0: Parse Input Arguments -----------------------
if [ "$#" -ne 18 ]; then
    echo "Usage: $0 GROUP SAMPLE MODIFIED_BASES ALL_MODS ROOT_DIR ALIGNED_BAM_DIR OUTPUT_DIR \
FILTER_THRESHOLD_ALL FILTER_THRESHOLD_A FILTER_THRESHOLD_C FILTER_THRESHOLD_T \
MOD_THRESHOLD_M6A MOD_THRESHOLD_PSEU MOD_THRESHOLD_INOSINE MOD_THRESHOLD_M5C \
VALID_COVERAGE_THRESHOLD PERCENT_MODIFIED_THRESHOLD MODKIT_THREADS"
    exit 1
fi

GROUP="${1}"                  # Experimental or biological group (e.g., Control, AD)
SAMPLE="${2}"                 # Sample identifier (e.g., C0, A9)
MODIFIED_BASES="${3}"         # String of modifications (e.g., m5C, m6A_DRACH, inosine_m6A, pseU) separated by spaces
ALL_MODS="${4}"               # Combined modifications string separated by underscores
ROOT_DIR="${5}"               # Root directory of the project
ALIGNED_BAM_DIR="${6}"        # Directory to the final aligned BAM files
OUTPUT_DIR="${7}"             # Directory to store the output BED files

FILTER_THRESHOLD_ALL="${8}"   # Threshold for all bases coverage
FILTER_THRESHOLD_A="${9}"     # Threshold for A bases coverage
FILTER_THRESHOLD_C="${10}"    # Threshold for C bases coverage
FILTER_THRESHOLD_T="${11}"    # Threshold for T bases coverage

MOD_THRESHOLD_M6A="${12}"     # Threshold for m6A modifications
MOD_THRESHOLD_PSEU="${13}"    # Threshold for pseU modifications
MOD_THRESHOLD_INOSINE="${14}" # Threshold for inosine modifications
MOD_THRESHOLD_M5C="${15}"     # Threshold for m5C modifications

VALID_COVERAGE_THRESHOLD="${16}"    # Threshold for valid coverage
PERCENT_MODIFIED_THRESHOLD="${17}"  # Threshold for percent modified
MODKIT_THREADS="${18}"              # Number of threads for modkit

# ----------------------- Step 2: Job Information -----------------------
echo "=========================================================="
echo "Start date : $(date)"
echo "Job name : $JOB_NAME"
echo "Job ID : $JOB_ID"
# Only echo SGE_TASK_ID if it's set
if [[ -n "${SGE_TASK_ID-}" ]]; then
    echo "Task ID : $SGE_TASK_ID"
fi
echo "=========================================================="

# ----------------------- Step 3: Validate Input BAM -----------------------
# Define the input BAM file for modkit extractor
INPUT_BAM="${ALIGNED_BAM_DIR}/${GROUP}_${SAMPLE}_primary.bam"

# Validate that the input BAM exists
if [ ! -f "${INPUT_BAM}" ]; then
    echo "Error: Input BAM file '${INPUT_BAM}' does not exist. Exiting."
    exit 1
fi

# ----------------------- Step 4: Define Output Files -----------------------
# Extract the base name of the BAM file (without path and extension)
BAM_BASENAME="$(basename "${INPUT_BAM}" .bam)"

# Define the output BED file
OUTPUT_BED="${OUTPUT_DIR}/${BAM_BASENAME}.bed"

# Define the output filtered BED file
FILTERED_BED="${OUTPUT_DIR}/${BAM_BASENAME}_${ALL_MODS}_filtered_cov_th_${VALID_COVERAGE_THRESHOLD}_per_th_${PERCENT_MODIFIED_THRESHOLD}.bed"

# ----------------------- Step 5: Define Flags for modkit pileup -----------------------
# Convert MODIFIED_BASES string to an array for the loop
IFS=' ' read -r -a MODS_ARRAY <<< "${MODIFIED_BASES}"

# Initialize associative arrays for base and modification thresholds
declare -A BASE_FLAGS
declare -A MOD_FLAGS

# Loop through each modification and determine the appropriate flags
for mod in "${MODS_ARRAY[@]}"; do
    case "${mod}" in
        m5C)
            BASE_FLAGS["C"]="${FILTER_THRESHOLD_C}"
            MOD_FLAGS["m"]="${MOD_THRESHOLD_M5C}"
            ;;
        m6A_DRACH)
            BASE_FLAGS["A"]="${FILTER_THRESHOLD_A}"
            MOD_FLAGS["a"]="${MOD_THRESHOLD_M6A}"
            ;;
        inosine_m6A)
            BASE_FLAGS["A"]="${FILTER_THRESHOLD_A}"  # Common filter threshold with m6A_DRACH
            MOD_FLAGS["a"]="${MOD_THRESHOLD_M6A}"      # Common mod threshold with m6A_DRACH
            MOD_FLAGS["17596"]="${MOD_THRESHOLD_INOSINE}"
            ;;
        pseU)
            BASE_FLAGS["T"]="${FILTER_THRESHOLD_T}"
            MOD_FLAGS["17802"]="${MOD_THRESHOLD_PSEU}"
            ;;
        *)
            echo "Error: Unsupported modification type '${mod}'."
            exit 1
            ;;
    esac
done

# Construct unique FLAGS for modkit pileup
FLAGS=""
for key in "${!BASE_FLAGS[@]}"; do
    FLAGS+="--filter-threshold ${key}:${BASE_FLAGS[${key}]} "
done

for key in "${!MOD_FLAGS[@]}"; do
    FLAGS+="--mod-threshold ${key}:${MOD_FLAGS[${key}]} "
done

# ----------------------- Step 6: Run modkit pileup and Measure Runtime -----------------------
# Log file paths
PILEUP_LOG="${OUTPUT_DIR}/pileup.log"
RUNTIME_LOG="${OUTPUT_DIR}/pileup_runtimes.log"

# Record the start time
START_TIME=$(date +%s)

# Log the start of the pileup
printf "Starting modkit pileup for %s at %s\n" "${BAM_BASENAME}" "$(date)" >> "${PILEUP_LOG}"

# Run modkit pileup with the specified flags
modkit pileup "${INPUT_BAM}" "${OUTPUT_BED}" --threads "${MODKIT_THREADS}" \
  --log-filepath "${PILEUP_LOG}" ${FLAGS} --with-header

# Record the end time and calculate runtime
END_TIME=$(date +%s)
RUNTIME=$((END_TIME - START_TIME))

# Log the runtime
printf "modkit pileup runtime for %s: %d seconds\n" "${BAM_BASENAME}" "${RUNTIME}" >> "${RUNTIME_LOG}"

# ----------------------- Step 7: Filter the Output BED File -----------------------
awk -v cov_thresh="${VALID_COVERAGE_THRESHOLD}" -v mod_thresh="${PERCENT_MODIFIED_THRESHOLD}" \
    '$10 >= cov_thresh && $11 >= mod_thresh' "${OUTPUT_BED}" > "${FILTERED_BED}"

# Validate that FILTERED_BED was created and is not empty
if [[ -s "${FILTERED_BED}" ]]; then
    echo "Filtering successful. Output BED file: ${FILTERED_BED}"
else
    echo "Warning: Filtered BED file '${FILTERED_BED}' is empty or was not created."
fi

# Inform the user of completion
echo "modkit pileup and filtering completed for ${BAM_BASENAME}.bam"
echo "=========================================================="
echo "End date : $(date)"
echo "=========================================================="
