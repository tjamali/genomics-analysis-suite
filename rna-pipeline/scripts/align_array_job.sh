#!/bin/bash -l

# =============================================================================
#                              array_job.sh
# =============================================================================
# Description:
#   This script is designed to process individual BAM files in parallel as part
#   of a Nanopore sequencing pipeline. It performs the following sequential steps
#   for each BAM file:
#
#     1. **Convert BAM to FASTQ Format:**
#        - Utilizes `samtools` to extract sequencing reads from the BAM file and
#          convert them into FASTQ format for alignment.
#
#     2. **Align FASTQ Using Minimap2:**
#        - Aligns the generated FASTQ file against a reference genome using `minimap2`,
#          incorporating splice-aware alignment with provided annotation data.
#        - Measures and logs the runtime of the alignment process for performance monitoring.
#
#     3. **Convert SAM to BAM Format:**
#        - Converts the alignment output from SAM to BAM format for efficient storage and downstream processing.
#
#   **Job Dependencies:**
#     - **Dorado Basecalling Job Dependency:**
#       - This alignment job (`array_job.sh`) is dependent on the successful completion
#         of the Dorado basecalling job, which generates the initial unaligned BAM files.
#       - Dependencies are managed externally by the main job submission script (e.g., `alignment_modkit_job.sh`)
#         using job scheduling parameters to ensure proper sequencing.
#
#   **Execution Context:**
#     - This script is intended to be executed as part of an array job managed by a job scheduler
#       (e.g., PBS, SGE, SLURM). Each array task processes a single BAM file independently.
#
# Arguments:
#   1. INPUT_DIR        - Directory containing input unaligned BAM files generated by Dorado.
#   2. OUTPUT_DIR       - Directory to store the final aligned BAM files.
#   3. ANNOTATION_FILE  - Path to the annotation BED file used by `minimap2` for splice-aware alignment.
#   4. REFERENCE_FILE   - Path to the reference genome file for alignment.
#   5. ALIGN_THREADS    - Number of threads to allocate for the alignment process.
#
# Usage:
#   This script is submitted as an array job via `qsub` or an equivalent job scheduler.
#   Example submission command:
#
#     qsub -t 1-<NUM_TASKS> -N align_array_job array_job.sh INPUT_DIR OUTPUT_DIR ANNOTATION_FILE REFERENCE_FILE ALIGN_THREADS
#
#   **Note:** Replace `<NUM_TASKS>` with the number of BAM files to process.
#
# Notes:
#   - Ensure that all input directories and files exist and have appropriate read/write permissions.
#   - INPUT_DIR is a temporary folder generated in previous job to gather all unaligned BAM file for all partitions in one folder.
#   - Adjust resource requests (e.g., memory, CPU threads) based on the computational requirements of your environment.
#   - Monitor job submissions and statuses using scheduler-specific commands (e.g., `qstat`, `squeue`).
#
# =============================================================================

# Enable strict error handling
set -euo pipefail

# ----------------------- Step 0: Load Necessary Modules -----------------------
module load samtools

# ----------------------- Step 1: Parse Input Arguments -----------------------
INPUT_DIR="${1}"
OUTPUT_DIR="${2}"
ANNOTATION_FILE="${3}"
REFERENCE_FILE="${4}"
ALIGN_THREADS="${5}"

# ----------------------- Step 2: Job Information -----------------------
echo "=========================================================="
echo "Start date : $(date)"
echo "Job name : $JOB_NAME"
echo "Job ID : $JOB_ID"
# Only echo SGE_TASK_ID if it's set
if [[ -n "${SGE_TASK_ID-}" ]]; then
    echo "Task ID : $SGE_TASK_ID"
fi
echo "=========================================================="

# ----------------------- Step 3: Validate Input Directories and Files -----------------------
if [ ! -d "${INPUT_DIR}" ]; then
    echo "Error: Input directory '${INPUT_DIR}' does not exist. Exiting."
    exit 1
fi

if [ ! -f "${ANNOTATION_FILE}" ]; then
    echo "Error: Annotation file '${ANNOTATION_FILE}' does not exist. Exiting."
    exit 1
fi

if [ ! -f "${REFERENCE_FILE}" ]; then
    echo "Error: Reference file '${REFERENCE_FILE}' does not exist. Exiting."
    exit 1
fi

# ----------------------- Step 4: Create Temporary Output Directory -----------------------
TEMP_DIR=$(mktemp -d "${OUTPUT_DIR}/run_${SGE_TASK_ID}_XXXXXX")

# Ensure the temporary output directory was created
if [ ! -d "${TEMP_DIR}" ]; then
    echo "Failed to create temporary output directory: ${TEMP_DIR}"
    exit 1
fi

echo "Using temporary output directory: ${TEMP_DIR}"

# ----------------------- Step 5: Get BAM File to Process -----------------------
# Each array job processes one file
BAM_FILE=$(ls "${INPUT_DIR}"/*.bam | sed -n "${SGE_TASK_ID}p")

# Extract the base name of the file (without path and extension)
BAM_BASENAME=$(basename "${BAM_FILE}" .bam)

# ----------------------- Step 6: Convert BAM to FASTQ -----------------------
FASTQ_FILE="${TEMP_DIR}/${BAM_BASENAME}.fastq"
samtools fastq -T ML,MM,MN,sd,ch,fn,rn,ns,qs,st,du,sv,dx,mx "${BAM_FILE}" > "${FASTQ_FILE}"

# ----------------------- Step 7: Align FASTQ Using Minimap2 and Log Runtime -----------------------
SAM_FILE="${TEMP_DIR}/${BAM_BASENAME}.sam"
START_TIME=$(date +%s)

minimap2 -ax splice --junc-bed "${ANNOTATION_FILE}" -uf -y "${REFERENCE_FILE}" "${FASTQ_FILE}" -t "${ALIGN_THREADS}" -2 --MD > "${SAM_FILE}"

END_TIME=$(date +%s)
RUNTIME=$((END_TIME - START_TIME))

# Store the runtime in a log file
echo "Alignment runtime for ${BAM_BASENAME}: ${RUNTIME} seconds" >> "${OUTPUT_DIR}/alignment_runtimes.log"

# ----------------------- Step 8: Convert SAM to BAM and Move to Output Directory -----------------------
ALIGNED_BAM="${OUTPUT_DIR}/${BAM_BASENAME}_aligned.bam"
samtools view -bS "${SAM_FILE}" > "${ALIGNED_BAM}"

# ----------------------- Step 9: Inform User of Completion -----------------------
echo "Processing completed for ${BAM_BASENAME}.bam"

# ----------------------- Step 10: Clean Up Temporary Directories -----------------------
rm -rf "${TEMP_DIR}"
rm -rf "${INPUT_DIR}"
